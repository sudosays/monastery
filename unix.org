#+title: Unix Tips & Tricks
#+options: author:nil date:nil

* Config files (Dotfiles)

multiple DE config with .xprofile

What to start in it:
+ emacs daemon/server
+ SSh agent

Leave DE specific configs in the DE's config
Such as:
+ rofi
+ tint2 bar
+ status menus

* Rsync

Rsync is a useful utility for synchronising files and dir contents (remotely or locally)

The basic format of the command is ~rsync source destination~ where it will try to ensure that the ~destination~ looks like the ~source~.

For remote/ssh rsync the above format still applies but the remote location is specified as ~user@server:destination~

Examples:

1) Make remote look like local:

   #begin_example
   rsync -r ~/local/ alice@example.com:~/local/
   #end_example

   The ~-r~ flag is for recursing into directories. /Note that the trailing slash on the directories is important to ensure that rsync understands that the directory is being compared to a directory./

* SSH & SFTP

Connect to SFTP via jump host

Use the ~-J~ flag to specify jump hosts a la:
#+begin_src bash
sftp -J user@jumpserver user@destination
#+end_src

** Use ~ssh-copy-id~ to store authorized keys on a remote server

If you have already generated an ssh key, then it can be used to automatically authenticate you to a remote server.

you can also do so via a jumphost with the following:
#+begin_src shell
ssh-copy-id -o ProxyJump=jump@host.server -i ~/.ssh/idfile user@target.server
#+end_src


*** Auto start reverse SSH on startup

https://askubuntu.com/questions/757779/auto-start-a-reverse-ssh-tunnel-on-system-startup

Suggested autossh


* Simple job queuing with ~flock~


Example queuing script:
#+begin_src bash
#!/usr/bin/bash
​
LOCKFILE=/tmp/gpu.lock
​
exec 100>"$LOCKFILE" || exit 1
​
#echo "User shell is $SHELL"
echo "Waiting for GPU availability..."
flock 100 || exit 1
echo "GPU is available. Executing commands..."
$@
echo "Done. Releasing GPU lock."
#+end_src
