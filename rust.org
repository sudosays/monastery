#+title: Rust
#+OPTIONS: author:nil date:nil

* Summary

[[./intro.md][Introduction]] - [[./learning_path.md][Learning Path]] -
[[./hello_world.md][Hello World!]] - [[./println.md][The ~println!~
Macro]]

- [[./cargo.md][Cargo]]
- [[./data_types.md][Data Types]]
- [[./vars_consts.md][Variables and Constants]]
- [[./loops.md][Loops!]]
- [[./read_stdio.md][Reading from ~stdio~]]
- [[./match_exprs_comparators.md][Match Expressions and Comparators]]
- [[./results_errors.md][Result Types and Error Handling]]
- [[./assoc_func.md][Associated Functions]]
  [[./documentation.md][Reading the Documentation]]
* Introduction

These notes are made from studying this
[[https://doc.rust-lang.org/book/title-page.html][book]]

* Learning Path

This is a checklist/learning path of things I want to do with Rust.

Resources used:

- [[https://doc.rust-lang.org/book/][The Rust Programming Language Book
  (online)]]

Rust Book:

1. [ ] Getting Started
   - [ ] Installation
   - [ ] Hello, World!
   - [ ] Hello, Cargo!

2. [ ] Programming a Guessing Game

3. [ ] Common Programming Concepts
   - [ ] Variables and Mutability
   - [ ] Data Types
   - [ ] Functions
   - [ ] Comments
   - [ ] Control Flow

4. [ ] Understanding Ownership
   - [ ] What is Ownership?
   - [ ] References and Borrowing
   - [ ] The Slice Type

5. [ ] Using Structs to Structure Related Data
   - [ ] Defining and Instantiating Structs
   - [ ] An Example Program Using Structs
   - [ ] Method Syntax

6. [ ] Enums and Pattern Matching
   - [ ] Defining an Enum
   - [ ] The ~match~ Control Flow Operator
   - [ ] Concise Control Flow with ~if let~

** Basic Rust Literacy

- [ ] Managing Growing Projects with Packages, Crates, and Modules
  - [ ] Packages and Crates
  - [ ] Defining Modules to Control Scope and Privacy
  - [ ] Paths for Referring to an Item in the Module Tree
  - [ ] Bringing Paths Into Scope with the ~use~ Keyword
  - [ ] Separating Modules into Different Files

- [ ] Common Collections
  - [ ] Storing Lists of Values with Vectors
  - [ ] Storing UTF-8 Encoded Text with Strings
  - [ ] Storing Keys with Associated Values in Hash Maps

- [ ] Error Handling
  - [ ] Unrecoverable Errors with ~panic!~
  - [ ] Recoverable Errors with ~Result~
  - [ ] To ~panic!~ or Not To ~panic!~

- [ ] Generic Types, Traits, and Lifetimes
  - [ ] Generic Data Types
  - [ ] Traits: Defining Shared Behavior
  - [ ] Validating References with Lifetimes

- [ ] Writing Automated Tests
  - [ ] How to Write Tests
  - [ ] Controlling How Tests Are Run
  - [ ] Test Organization

- [ ] An I/O Project: Building a Command Line Program
  - [ ] Accepting Command Line Arguments
  - [ ] Reading a File
  - [ ] Refactoring to Improve Modularity and Error Handling
  - [ ] Developing the Library's Functionality with Test Driven
    Development
  - [ ] Working with Environment Variables
  - [ ] Writing Error Messages to Standard Error Instead of Standard
    Output

** Thinking in Rust

- [ ] Functional Language Features: Iterators and Closures
  - [ ] Closures: Anonymous Functions that Can Capture Their Environment
  - [ ] Processing a Series of Items with Iterators
  - [ ] Improving Our I/O Project
  - [ ] Comparing Performance: Loops vs.Â Iterators

- [ ] More about Cargo and Crates.io
  - [ ] Customizing Builds with Release Profiles
  - [ ] Publishing a Crate to Crates.io
  - [ ] Cargo Workspaces
  - [ ] Installing Binaries from Crates.io with ~cargo install~
  - [ ] Extending Cargo with Custom Commands

- [ ] Smart Pointers
  - [ ] Using ~Box<T>~ to Point to Data on the Heap
  - [ ] Treating Smart Pointers Like Regular References with the ~Deref~
    Trait
  - [ ] Running Code on Cleanup with the ~Drop~ Trait
  - [ ] ~Rc<T>~, the Reference Counted Smart Pointer
  - [ ] ~RefCell<T>~ and the Interior Mutability Pattern
  - [ ] Reference Cycles Can Leak Memory

- [ ] Fearless Concurrency
  - [ ] Using Threads to Run Code Simultaneously
  - [ ] Using Message Passing to Transfer Data Between Threads
  - [ ] Shared-State Concurrency
  - [ ] Extensible Concurrency with the ~Sync~ and ~Send~ Traits

- [ ] Object Oriented Programming Features of Rust
  - [ ] Characteristics of Object-Oriented Languages
  - [ ] Using Trait Objects That Allow for Values of Different Types
  - [ ] Implementing an Object-Oriented Design Pattern

** Advanced Topics

- [ ] Patterns and Matching
  - [ ] All the Places Patterns Can Be Used
  - [ ] Refutability: Whether a Pattern Might Fail to Match
  - [ ] Pattern Syntax

- [ ] Advanced Features
  - [ ] Unsafe Rust
  - [ ] Advanced Traits
  - [ ] Advanced Types
  - [ ] Advanced Functions and Closures
  - [ ] Macros

- [ ] Final Project: Building a Multithreaded Web Server
  - [ ] Building a Single-Threaded Web Server
  - [ ] Turning Our Single-Threaded Server into a Multithreaded Server
  - [ ] Graceful Shutdown and Cleanup

- [ ] Appendix
  - [ ] A - Keywords
  - [ ] B - Operators and Symbols
  - [ ] C - Derivable Traits
  - [ ] D - Useful Development Tools
  - [ ] E - Editions
  - [ ] F - Translations of the Book
  - [ ] G - How Rust is Made and "Nightly Rust"

Extras:

- [ ] WebGL, wasm Rust
- [ ] Rustlings

Project ideas:

- [ ] Z80 emulator
- [ ] Rust tensor math lib (with ABI/API)
- [ ] Encryption algos with Rust

* Hello World

All Rust programs must feature a main function defined by

#+begin_example
  fn main() {}
#+end_example

** Compilation

   :CUSTOM_ID: compilation
   :END:
Compiling is done using the rustc command and supplying the file
containing the main function

** Cargo

   :CUSTOM_ID: cargo
   :END:
Cargo is a useful tool for project creation and dependency management.

*** Starting new projects

    :CUSTOM_ID: starting-new-projects
    :END:
Using ~cargo new <name>~ automatically creates a new dir and initialises
a git repo in it. In the new repo you will find the following:

- Cargo.toml
- .gitignore
- src

  - main.rs

*** Cargo.toml

    :CUSTOM_ID: cargo.toml
    :END:
The Cargo.toml file is a configuration file for the project written in
Toms Obvious Minimal Language.

It specifies a Rust package or /crate/.

Cargo expects all code to live within the src directory and all of the
configuration, README, and licenses to live in the top-level directory.

*** Building with Cargo

    :CUSTOM_ID: building-with-cargo
    :END:
Cargo has three different commands to check, build, and run the Rust
code called ~check~, ~build~, and ~run~.

Cargo check doesn't actually build a runnable executable, but does a
quick check to see if your code will compile. Build on the other hand
actually creates a binary executable and places it in the target/debug
folder. Finally, run builds and then runs the code from the target/debug
folder.

Should you wish to release a binary executable, adding the flag
~--release~ to the build command will build a release version that has
been optimised thoroughly.

*** Adding Dependencies

    :CUSTOM_ID: adding-dependencies
    :END:
With the Cargo.toml file you can easily add library crates to your
project by listing them under the "dependencies" section. It is
necessary to specify the crate name as well as providing a /semantic
version/ number. For example, if we were to add the ~rand~ library we
could do it like this:

#+begin_example
  [dependencies]

  rand = "0.3.14"
#+end_example

When this has been added to the Cargo.toml file, running build, check,
or run will cause cargo to automatically look up the rand library on the
crates.io registry. Then it'll pull the library as well as any of its
dependencies before compiling your crate.

*** Updating dependency versions

    :CUSTOM_ID: updating-dependency-versions
    :END:
Running ~cargo update~ will ignore the Cargo.lock file and attempt to
update the version number of the dependencies. However, it will only
update the patch versions and not the minor versions. For example, given
a version 1.2.1 and there are two new versions 1.2.2 and 1.3.0. Cargo
will update to 1.2.2 and not 1.3.0 because it will not automatically
bump the minor version number. Therefore, you need to manually bump any
dependencies if you wish to use a newer minor/major version.

*** Cargo.lock file

    :CUSTOM_ID: cargo.lock-file
    :END:
For people familiar with the Python Pip system, the Cargo.lock file
works similarly to a requirements.txt, but is created and maintained
automatically by cargo. When the crate is first built it will "lock" all
of the versions for the dependencies which ensures that the crate will
always build regardless of the dependencies updating with breaking
changes. These versions will not update unless you explicitly run
~cargo update~ or manually edit the versions in the Cargo.toml file.
* Associated functions

The double colon syntax denotes calling an /associated function/ meaning
it is linked to a type and not an instance. That also means it does not
need an instance to be called. For example, the ~String~ type has an
associated function ~::new()~ which returns a new instance of the string
type.

* Cargo

Cargo is a useful tool for project creation and dependency management.

** Starting new projects

Using ~cargo new <name>~ automatically creates a new dir and initialises
a git repo in it. In the new repo you will find the following:

- Cargo.toml
- .gitignore
- src

  - main.rs

** Cargo.toml

The Cargo.toml file is a configuration file for the project written in
Toms Obvious Minimal Language.

It specifies a Rust package or /crate/.

Cargo expects all code to live within the src directory and all of the
configuration, README, and licenses to live in the top-level directory.

** Building with Cargo

Cargo has three different commands to check, build, and run the Rust
code called ~check~, ~build~, and ~run~.

Cargo check doesn't actually build a runnable executable, but does a
quick check to see if your code will compile. Build on the other hand
actually creates a binary executable and places it in the target/debug
folder. Finally, run builds and then runs the code from the target/debug
folder.

Should you wish to release a binary executable, adding the flag
~--release~ to the build command will build a release version that has
been optimised thoroughly.

** Adding Dependencies

With the Cargo.toml file you can easily add library crates to your
project by listing them under the "dependencies" section. It is
necessary to specify the crate name as well as providing a /semantic
version/ number. For example, if we were to add the ~rand~ library we
could do it like this:

#+begin_example
  [dependencies]

  rand = "0.3.14"
#+end_example

When this has been added to the Cargo.toml file, running build, check,
or run will cause cargo to automatically look up the rand library on the
crates.io registry. Then it'll pull the library as well as any of its
dependencies before compiling your crate.

** Updating dependency versions

Running ~cargo update~ will ignore the Cargo.lock file and attempt to
update the version number of the dependencies. However, it will only
update the patch versions and not the minor versions. For example, given
a version 1.2.1 and there are two new versions 1.2.2 and 1.3.0. Cargo
will update to 1.2.2 and not 1.3.0 because it will not automatically
bump the minor version number. Therefore, you need to manually bump any
dependencies if you wish to use a newer minor/major version.

** Cargo.lock file

For people familiar with the Python Pip system, the Cargo.lock file
works similarly to a requirements.txt, but is created and maintained
automatically by cargo. When the crate is first built it will "lock" all
of the versions for the dependencies which ensures that the crate will
always build regardless of the dependencies updating with breaking
changes. These versions will not update unless you explicitly run
~cargo update~ or manually edit the versions in the Cargo.toml file.
* Data Types

Rust is a statically typed language that is able to infer data types at
compile time. However, sometimes there is ambiguity as to what type
should be inferred and then it is required for the variable to be
explicitly annotated with a datatype. This is particularly true when
parsing strings into numerical values as they can be valid for multiple
different types: integer, float, double etc.

** Scalar types

   :CUSTOM_ID: scalar-types
   :END:
Scalar types, as the name suggests, represent a singular value. Rust has
four primary scalar types:

- integer
- floating-point
- boolean
- character

*** Integers

    :CUSTOM_ID: integers
    :END:
Integers are numbers without a fractional component and Rust allows for
a varying number of integer lengths from 8-bit up to 128-bit or whatever
the architecture standard is (specified with ~isize~ and ~usize~ for
signed and unsigned respectively). These integers can either be signed
(allowing for negative numbers) or unsigned (positive numbers only) by
prefixing the integer length with ~i~ or ~u~ respectively. A breakdown
on integer lengths and their type declarations can be found in Table
\ref{tab:int_types}.

| Length  | Signed  | Unsigned |
|---------+---------+----------|
| 8-bit   | ~i8~    | ~u8~     |
| 16-bit  | ~i16~   | ~u16~    |
| 32-bit  | ~i32~   | ~u32~    |
| 64-bit  | ~i64~   | ~u64~    |
| 128-bit | ~i128~  | ~u128~   |
| arch    | ~isize~ | ~usize~  |

Integer literals can be written in a variety of ways as well as
supporting a type suffix. The exception to this is the byte literal
notation which will always result in a ~u8~ type. Some examples of the
different integer literals can be found in the table below.

| Number literals  | Example       |
|------------------+---------------|
| Decimal          | ~98_222~      |
| Hex              | ~0xff~        |
| Octal            | ~0o77~        |
| Binary           | ~0b1001_1111~ |
| Byte (~u8~ only) | ~b'A'~        |

Integer overflow in Rust is handled a bit strangely. When compiling in
debug mode, Rust will check for integer overflow and panic if it occurs
by exiting with an error. However, if it is compiled in release mode,
Rust will instead use two's complement wrapping to prevent panics. This
is still considered erroneous since the wrapped value might not have the
intended value.

*** Floating-Point Types

    :CUSTOM_ID: floating-point-types
    :END:
The default floating-point size in Rust is 64 bits. Thus, if it is left
to the compiler to infer a floating-point type it will default to a
64-bit float with ~f64~. However, you may explicitly specify a 32-bit
float (~f32~) as well. In Rust, a 32-bit float is considered single
precision while a 64-bit float is considered double precision.

** Compound types

   :CUSTOM_ID: compound-types
   :END:
* Documentation

To open and read documentation for the crate and it's dependencies you
can run the command ~cargo doc --open~ which will build and show the
documentation.

** Rust code documentation

   :CUSTOM_ID: rust-code-documentation
   :END:
* Loops!

For the simplest of loops, using the ~loop~ syntax creates and infinite
loop. You can then use the controls of ~break~ and ~continue~ within the
loop or to exit.
* Match expressions and comparators

Every type that can be compared has a ~.cmp()~ method that returns a
~std::cmp::Ordering~ type. This can be one of three variants:
~Ordering::Less~, ~Ordering::Greater~, and ~Ordering::Equal~.

A match expression is similar to a switch statement in other languages
and will check the value against its /arms/ and then execute the
appropriate code. For example:

#+begin_example
  match numbera.cmp(&numberb) {
      Ordering::Less => println!("Number A < Number B"),
      Ordering::Greater => println!("Number A > Number B"),
      Ordering::Equal => println!("Number A = Number B"),
  }
#+end_example

However, match expressions are much more powerful than simple switch
statements and can be used to ensure that you are handling a whole
variety of situations that can arise.

** Error handling with match expressions}

Since the ~Result~ type is an enum containing ~Ok~ and ~Err~ types, you
can use a ~match~ expression to replace an ~expect~ method and do more
fine-grained processing of errors. In this case the arms of the
expression become the types ~Ok~ and ~Err~.

For example, trying to parse a string into an integer you can use the
following:

#+begin_example
  let five = "a 5"
  let five: u32 = match five.trim().parse() {
      Ok(num) => num,
      Err(_) => { //do something },
  }
#+end_example

The underscore is a wildcard that will match any value, but not bind to
it (meaning you won't be able to use the underscore in an expression).
* Ownership in Rust

  :CUSTOM_ID: ownership-in-rust
  :END:
* The ~println!~ Macro

  :CUSTOM_ID: the-println-macro
  :END:
The ~println!~ macro allows you to use placeholders in the form of curly
braces within the string. These placeholders then get replaced with the
value of the supplied variables in the order in which they appear. For
example:

#+begin_example
  println!("This is placeholder {}, {}", 1, 2);
  // outputs "This is placeholder 1, 2"
#+end_example

** Marco not function

   :CUSTOM_ID: marco-not-function
   :END:
The ~println!~ is not a function but a macro. Macros are specified with
an exclamation point "!".
* Reading from ~stdio~

  :CUSTOM_ID: reading-from-stdio
  :END:
The standard library contains an io module which can be used to create
an instance of ~std::io::Stdin~ by calling the function
~std::io::stdin()~. This provides a handler for reading from the
terminal input. Specifically, reading a line from the terminal input can
be done by calling the ~read_line(&mut <arg>)~ function on an instance
of ~std::io::Stdin~ where the argument is a reference to a variable that
the line will be read into. Remember that since the argument needs to be
modified to contain the string, it must be explicitly declared mutable.
* Result types and Error handling

  :CUSTOM_ID: result-types-and-error-handling
  :END:
Rust uses Result types to encode error handling information. The Result
type itself is an enum with two variants Ok, and Err. Using Result types
effectively forces you to write error handling code as the compiler will
complain at you with warnings.

For a specific example, the ~std::io::stdin().read_line(&mut <arg>)~
returns a Result value of a specific type ~io::Result~. These Result
types may have methods defined on them and in this particular case the
~.expect(<String>)~ method will print the given string argument if the
Result type is of an Err variant.
* Variables and Constants

  :CUSTOM_ID: variables-and-constants
  :END:
** Variable Assignment and Referencing

   :CUSTOM_ID: variable-assignment-and-referencing
   :END:
Variables and references are immutable by default. Variable assignment
is achieved by using the ~let~ keyword. Should you want a mutable
variable you add the ~mut~ keyword after ~let~ but before the variable
name. For example:

#+begin_example
  let steadfast = true; //immutable

  let mut wavering = true; //mutable
  wavering = false;
#+end_example

Similarly, references are also immutable by default.

#+begin_example
  &wavering // immutable

  &mut wavering // mutable
#+end_example

It is important in Rust to be judicious in the use of mutability. There
are trade-offs to be made with respect to efficiency, debugging, code
legibility, and maintenance. For example, it might be more efficient to
modify a large data structure in place than creating a new updated copy.
On the other hand, if the data is small enough, it would probably be
easier to read by creating new instances of the data structure that also
avoids any unwanted mutability.

*** Specifying type

    :CUSTOM_ID: specifying-type
    :END:
A specific type for a variable can be denoted using the ~:~ syntax. For
example declaring a unsigned 32-bit integer looks something like this:

#+begin_example
  let x: u32 = 1
#+end_example

** Variable Shadowing

   :CUSTOM_ID: variable-shadowing
   :END:
Rust uses type inference to determine --- at compile time --- what the
types are of the variables. However, it also allows variable names to be
reused even in the same scope and "shadow" the other variable
declarations and assignments. This is useful when doing type conversions
without having to declare additional variable names.

** Type Conversions

*** String to Unsigned 32-bit Integer

Strings in Rust feature a ~parse~ function to convert strings to
whatever the inferred type is. However, parsing strings can also result
in failure and as such you should use the ~expect~ method on the ~parse~
method.

It is also wise to use ~trim()~ on strings to ensure that leading and
trailing whitespace is removed before attempting to parse an integer.

For example converting the string ~five ~ "5"= to an integer you can do
the following.

#+begin_example
  let five: u32 = five.trim().parse()
      .expect("Failed to parse string!")
#+end_example

** Constants

While variables in Rust are immutable by default, there are also
constants which are always immutable. Furthermore, constants have the
following constraints:

- declared using ~const~ keyword
- type must be annotated
- may only be set to a constant expression

That last point means that the constant cannot be assigned to the result
of a function or another any value that is computed at runtime.

Rust convention is to name constants with all uppercase and underscores
between words.

#+begin_example
  const MAX_POINTS: u32 = 100_000;
#+end_example

*** Scope & Shadowing

Constants are valid for the entire time the program runs within their
declared scope. Furthermore, constants may be declared in the global
scope so as to be accessible to the entirety of the Rust program.

That also means that a constant, once declared, cannot be shadowed by
another variable. Instead the compiler will complain that the variable
name was instead interpreted as a constant pattern. This does not apply
to shadowing a constant with a constant in a different scope as can be
seen below.

#+begin_example
  const MAX_POINTS: u32 = 100_000;

  fn main() {
      
      const MAX_POINTS: u32 = 200_000;

      println!("{}", MAX_POINTS);

  }
#+end_example

The following code will print ~200000~ although the compiler will warn
that the outer scoped ~MAX_POINTS~ is unused.

It should be noted however, that constants are used in the scope that
they are declared in. For example, if we had a function that makes use
of our constant and then call in in a scope where the constant was
shadowed, it will use the unshadowed constant. See the example below.

#+begin_example
  const MAX_POINTS: u32 = 100_000;

  fn main() {
      
      const MAX_POINTS: u32 = 200_000;

      println!("{}", MAX_POINTS);

      print_points();
  }

  fn print_points() {

      println!("{}", MAX_POINTS);

  }
#+end_example

The following will first print ~200000~ followed by ~100000~ since the
function ~print_points~ makes use of the globally scoped constant and
not the locally scoped constant.


* Extras

** Rust + WASM
For this we make use of the ~wasm-pack~ tool as well as the ~wasm-bingen~ crate.

To use ~wasm-bindgen~ we decorate our functions etc with the ~#[wasm_bindgen]~.

It is also important to specify that it is a lib type of "cdylib" or a dynamically linked lib.

Building the rust-wasm project uses ~wasm-pack~:
#+begin_src
wasm-pack build --target web
#+end_src
